import sqlite3

# Cr√©ation de la base de donn√©es et de la table Clients
def creer_base():
    with sqlite3.connect('clients.db') as con:
        con.execute("PRAGMA foreign_keys = ON")
        cur = con.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS Clients (
                idClient INTEGER PRIMARY KEY AUTOINCREMENT, 
                nom TEXT NOT NULL, 
                prenom TEXT NOT NULL, 
                age INTEGER CHECK(age > 0)
            )
        ''')
        con.commit()

# Ajouter un client
def ajouter_client():
    nom = input("Nom : ").strip()
    prenom = input("Pr√©nom : ").strip()
    
    # V√©rification de l'√¢ge
    while True:
        try:
            age = int(input("√Çge : ").strip())
            if age <= 0:
                print("L'√¢ge doit √™tre un nombre positif.")
            else:
                break
        except ValueError:
            print("Veuillez entrer un √¢ge valide.")

    try:
        with sqlite3.connect('clients.db') as con:
            cur = con.cursor()
            cur.execute("INSERT INTO Clients (nom, prenom, age) VALUES (?, ?, ?)", (nom, prenom, age))
            con.commit()
            print(f"‚úÖ Client {nom} {prenom} ajout√© avec succ√®s.")
    except sqlite3.Error as e:
        print("‚ùå Erreur lors de l'ajout :", e)

# Modifier un client
def modifier_client():
    afficher_clients()
    try:
        id_client = int(input("Entrez l'ID du client √† modifier : ").strip())
        nom = input("Nouveau nom : ").strip()
        prenom = input("Nouveau pr√©nom : ").strip()
        age = int(input("Nouvel √¢ge : ").strip())

        with sqlite3.connect('clients.db') as con:
            cur = con.cursor()
            cur.execute("UPDATE Clients SET nom=?, prenom=?, age=? WHERE idClient=?", (nom, prenom, age, id_client))
            if cur.rowcount > 0:
                con.commit()
                print(f"‚úÖ Client {id_client} modifi√© avec succ√®s.")
            else:
                print("‚ùå Aucun client trouv√© avec cet ID.")
    except ValueError:
        print("‚ùå ID ou √¢ge invalide.")
    except sqlite3.Error as e:
        print("‚ùå Erreur lors de la modification :", e)

# Supprimer un client
def supprimer_client():
    afficher_clients()
    try:
        id_client = int(input("Entrez l'ID du client √† supprimer : ").strip())

        with sqlite3.connect('clients.db') as con:
            cur = con.cursor()
            cur.execute("DELETE FROM Clients WHERE idClient=?", (id_client,))
            if cur.rowcount > 0:
                con.commit()
                print(f"‚úÖ Client {id_client} supprim√© avec succ√®s.")
            else:
                print("‚ùå Aucun client trouv√© avec cet ID.")
    except ValueError:
        print("‚ùå ID invalide.")
    except sqlite3.Error as e:
        print("‚ùå Erreur lors de la suppression :", e)

# Afficher les clients
def afficher_clients():
    try:
        with sqlite3.connect('clients.db') as con:
            cur = con.cursor()
            cur.execute("SELECT * FROM Clients")
            clients = cur.fetchall()
            if clients:
                print("\nüìú Liste des clients :")
                print("-" * 40)
                for client in clients:
                    print(f"ID: {client[0]} | Nom: {client[1]} | Pr√©nom: {client[2]} | √Çge: {client[3]}")
                print("-" * 40)
            else:
                print("üì≠ Aucun client trouv√©.")
    except sqlite3.Error as e:
        print("‚ùå Erreur lors de l'affichage :", e)

# Menu principal
def menu():
    while True:
        print("\nüìå MENU PRINCIPAL")
        print("1Ô∏è‚É£  Ajouter un client")
        print("2Ô∏è‚É£  Modifier un client")
        print("3Ô∏è‚É£  Supprimer un client")
        print("4Ô∏è‚É£  Afficher les clients")
        print("9Ô∏è‚É£  Quitter")
        choix = input("Votre choix : ").strip()

        if choix == "1":
            ajouter_client()
        elif choix == "2":
            modifier_client()
        elif choix == "3":
            supprimer_client()
        elif choix == "4":
            afficher_clients()
        elif choix == "9":
            print("üëã Au revoir !")
            break
        else:
            print("‚ùå Choix invalide. Veuillez essayer √† nouveau.")

# Lancer le programme
if __name__ == "__main__":
    creer_base()
    menu()
